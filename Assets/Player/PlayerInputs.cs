//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Player/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Basic Inputs"",
            ""id"": ""66c0850f-7247-4774-954d-b56f8602d3ed"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fbacca47-b8e9-490b-aa3e-d80b10f1e287"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Change Player"",
                    ""type"": ""Button"",
                    ""id"": ""51af31cd-ca7b-4957-8bd5-b4d8507a87ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0356d9ce-7582-4144-b87b-29e289b29871"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""741bdc49-a007-46f7-8537-33de03141825"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9340cef5-4ad6-4094-acb4-42ac32184e4c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7c8faaee-08b9-4e1b-b2f5-a88fbe5ae26f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9ec8eceb-bf0a-450d-af26-ea6ad35af517"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a3eb75e1-a5a6-46bc-981f-41fa336a5a0e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Basic Inputs
        m_BasicInputs = asset.FindActionMap("Basic Inputs", throwIfNotFound: true);
        m_BasicInputs_Movement = m_BasicInputs.FindAction("Movement", throwIfNotFound: true);
        m_BasicInputs_ChangePlayer = m_BasicInputs.FindAction("Change Player", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Basic Inputs
    private readonly InputActionMap m_BasicInputs;
    private IBasicInputsActions m_BasicInputsActionsCallbackInterface;
    private readonly InputAction m_BasicInputs_Movement;
    private readonly InputAction m_BasicInputs_ChangePlayer;
    public struct BasicInputsActions
    {
        private @PlayerInputs m_Wrapper;
        public BasicInputsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_BasicInputs_Movement;
        public InputAction @ChangePlayer => m_Wrapper.m_BasicInputs_ChangePlayer;
        public InputActionMap Get() { return m_Wrapper.m_BasicInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicInputsActions set) { return set.Get(); }
        public void SetCallbacks(IBasicInputsActions instance)
        {
            if (m_Wrapper.m_BasicInputsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_BasicInputsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_BasicInputsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_BasicInputsActionsCallbackInterface.OnMovement;
                @ChangePlayer.started -= m_Wrapper.m_BasicInputsActionsCallbackInterface.OnChangePlayer;
                @ChangePlayer.performed -= m_Wrapper.m_BasicInputsActionsCallbackInterface.OnChangePlayer;
                @ChangePlayer.canceled -= m_Wrapper.m_BasicInputsActionsCallbackInterface.OnChangePlayer;
            }
            m_Wrapper.m_BasicInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @ChangePlayer.started += instance.OnChangePlayer;
                @ChangePlayer.performed += instance.OnChangePlayer;
                @ChangePlayer.canceled += instance.OnChangePlayer;
            }
        }
    }
    public BasicInputsActions @BasicInputs => new BasicInputsActions(this);
    public interface IBasicInputsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnChangePlayer(InputAction.CallbackContext context);
    }
}
